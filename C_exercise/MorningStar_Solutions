1. 要確認特定bit是true or false要用哪個bitwise operator? (選擇題)
a 
a & (1 << 6)
00010
Sol : 
        int test_num =  1;
        int test_target = 32;
        int test_new = 1<<5;
        printf("test bit at 0 place : %d\n",test_num & test_target);
        printf("test bit at 5 place : %d\n",test_new & test_target);



2. gcc的哪個flag會在compile的時候保留debug資訊？ (選擇題) 
Sol : -g


3.
- int
Sol : int a;

- pointer
Sol : int *b;

- 10 integer array
Sol : int c[10];

- pointer to array
Sol : 
int arr[] = {1,2,3,4,5,6,7,8,9,10};
int *p;
p = arr;
printf(*p) //arr[0]
printf(*(p+3)) //arr[3]

- function pointer
Sol : 
int add(int n1,int n2){
        return n1+n2;
}
int main(){
        int (*fptr)(int , int);
        fptr = add;

        int num1 = 10,num2 = 30;

        printf("num1 + num2 is : %d\n",fptr(num1,num2));
        return 0;
}
// from 小高


- function pointer contains 10 pointers
Sol :

int ten_pointer(int *n1,int *n2,int *n3){
        return (*n1)+(*n2)+(*n3);
}

int (*tenfptr)(int*,int*,int*);
tenfptr = ten_pointer;
int v1 = 101;
int v2 = 22;
int v3 = 33;
int *pv1,*pv2,*pv3;
pv1 = &v1;
pv2 = &v2;
pv3 = &v3;
printf("easy function pointer : %d\n",tenfptr(pv1,pv2,pv3));




4. #define SET_BIT (variable, bit)	//bit是要set、clear第幾個bit
   #define CLR_BIT (variable, bit)

#define SET_BIT(value,bit) (value |= (1<<bit))
#define CLR_BIT(value,bit) (value &= ~(1<<bit))
EX : 
SET_BIT(64,2)
value = 1000000
1<<2  = 0000100
------------or --------
value = 1000100

CLR_BIT(63,2)
value = 0111111
~     = 1111011
------------AND--------
value = 0111011





5. 
#define MY_SIZEOF (variable)

Sol : 
#define my_sizeof(value)  (char*)(&value+1) - (char*)(&value)
用記憶體位置相剪求出sizeof
要用char*因為char pointer是一次讀一個byte 如果是用int*一次讀4bytes



6.
int a = 5, b = 6, c;
c = a+++b;
print a, b, c

Solutions : 
其實是undefine behavior 
不同的compiler  a+++b不一樣  GCC GNU 等
大部分是
a+++b =   (a++) + (b)
在a+b後再increment
5+6 = 11
11+1 = 12


7.
unsigned int A = -1;
int B = ~0;

if (A == B)
	printf("the same")
else
	printf("Not the same");


Solutions : 
int 長度 4byte = 32 bits signed
max_int 2^16=65536
~是反向 意思是  0->1  1->0
8位數 00000000  ~ FFFFFFFF
B = 00000000 - > 11111111
11111111 在C語言中是-1
因為在C語言中是用2的補數
所以A==B


8. 
void FOO (char* s)
{
	s = malloc(100);
	strcpy(s, "Bob");
}

char *a = "Alice";
char *name = a;

FOO(name);

printf("%s\n", name);

Sol :
因為是複製一份記憶體位置到S
所以原本的name沒有改
參考資料 : 
http://www.victorgau.com/?p=503



9. 解釋下列

const int a;
a的值不能更動

const int *p = &a;
p可改 a不能

int *p const = &a;
p不能改 a可

int const *a const;
p不能改 a不能改


10.  請問執行完後，j的值是多少?
int M(int i){
  static count = 0;
  count = count + i;
  return count;
}

int i, j;
for(int i=0 ; i<=4 ; ++i){
  j = M(i);
}

因為static的關係
第1次loop  count = 1
第2次loop  count = 2
第3次loop  count = 3
第4次loop  count = 4






口試題
1. process v.s. thread
2. mutex, semaphore，binary semaphore跟mutex差在哪
3. code section, data section放在memory的哪裡
4. stack v.s. heap, malloc分配的記憶體是哪一塊
5. static
6. race condition
7. muliti-thread怎麼做serialization, synchronization
8. process間可以怎麼互傳
9. Linux的user space跟system space如何溝通
10. 用你的話解釋OS在幹嘛
11. Deadlock條件
12. critical section在幹嘛
13. 對Linux的了解有多少
14. gcc的參數裡面加上-l代表link的意思，請問static library跟dynamic library的差異？
15. MACRO跟inline的差別?
16. MACRO的缺點?
17. 舉出race condition和deadlock的程式碼實例？   舉出來後，會問你該怎麼解決?
18. 甚麼情況會發生stack overflow?
19. 該怎麼解決stack overflow?
20. 請說明貝式理論?  甚麼情況會使P(x|y) = P(x)?
21. 已知有一變數int a = 10;    &a+1會發生甚麼事?  


Sol : 
1. process vs thread

https://hackpad.com/ep/pad/static/5TOjUJI2rKu

process 之間的address space並不相同，thread則共用相同的address space

Process : 已經背load到記憶體中了，隨時都有可能被CPU執行
一個多工的系統(multitasking system)可以同時運行多的process 每一個CPU一次只能做一件事情，如果process數目超過cpu個數
那就需要scheduling的技術 (FIFO,Round Robin等)
每個process間在記憶體中擺放的位置不好 會產生記憶體外部碎片 因此memory management是一個問題。

每個Process所需要的記憶體總合，也可能大於實體記憶體，因此需要另
         外用二次儲存裝置充當虛擬記憶體(Virtual Memory)，但是二次儲存裝置的速
         度肯定很慢，因此如何做到對虛擬記憶體最小的依賴，盡量避免Page Fault(電
         腦在主記憶體中找不到資料，而要去二次記憶體找，就稱為Page Fault)
         防止Thrashing的發生(因為Virtual Memory演算法不當，造成幾乎每次存取都要
         依賴二次記憶體，就是Thrashing)，以達到效能最佳化，也是個學問


Thread :
在同一個process底下，可以有許多的thread。以往process一次只能做一件事情
因此如果要一面聽音樂 一面查詢 就需要有multithread 
1個process底下可以有很多個thread 一個process的global variable可以讓所有的thread共享
所有的thread可存取共同的global value，也能有自己的local value
因為可以存取共同的值，有可能會有錯誤的情況發生，同部問題發生
這就是Synchronization問題 =>恐龍本第六章
         又，每一個Thread之間可能會互搶資源，而造成死結(Deadlock)，只要以下四
         個條件都滿足就有死結。(1)這個資源不能同時給兩個人用 (2)有一個人拿了一
         個資源，又想拿別人的資源 (3)如果一個人占了茅坑不拉屎，占用資源很久，仍
         不能趕他走 (4)A等B，B等C，C等D，D又等A 等成一圈

mutuex  semaphore 的作用
mutex，一句话：保护共享资源。
該thread 獲得鎖 上鎖 在 解鎖
semaphore的用途，一句话：调度线程。

semaphore
計數訊號量具備兩種操作動作，之前稱為 V（又稱signal()）與 P（wait()）。 V操作會增加號誌 S的數值，P操作會減少它。
運作方式：
初始化，給與它一個非負數的整數值。
執行 P（wait()），號誌S的值將被減少。企圖進入臨界區段的行程，需要先執行 P（wait()）。當號誌S減為負值時，行程會被擋住，不能繼續；當號誌S不為負值時，行程可以獲准進入臨界區段。
執行 V（又稱signal()），號誌S的值會被增加。結束離開臨界區段的行程，將會執行 V（又稱signal()）。當號誌S不為負值時，先前被擋住的其他行程，將可獲准進入臨界區段。

12.
臨界區段（Critical section）指的是一個存取共用資源（例如：共用裝置或是共用記憶體）的程式片段，而這些共用資源有無法同時被多個執行緒存取的特性。

Critical Section Design
1. Mutual Exclusion：
　　這也是臨界區間的最基本要求，一次最多只能有一個 Process 在裡面存取共用變數。

2. Progress：
　　Progress 有兩個要求。

　　　　　　＋ 不想進入臨界區間的 Process 不可以阻礙其它 Process 進入

　　　　　　　(即：不可參與進入臨界區間的決策過程)

　　　　　　＋ 必須在有限的時間內，自那些想進入的 Process 中，挑選出一個 Process 進入。

　　　　　　　(即：不可以出現 DeadLock)

3. Bounded Waiting：
　　當 Process 申請要進入臨界區間到真正進入這段等待時間是有限的，即：若有n個 Processes 想進入，則任一 Process 至多等待n-1次，即可進入。


14. gcc的參數裡面加上-l代表link的意思，請問static library跟dynamic library的差異？

靜態函式庫是把整個Library包進去執行檔，因此可以保證到不同機器環境下執行，也不會因為少了這個函式庫導致無法執行檔案，但其缺點是檔案會比較大，假如大部分檔案都需要用到相同的函式庫，但全部都使用靜態連結的方式，那這樣非常的佔空間資源

動態連結函式庫的好處，就是可以讓多個執行檔案，同時連結使用，可以減少佔空間，但是卻容易發生如果Library的版本不同，會導致連結執行錯誤。
使用動態連結機制時，函式庫可以先不需要被連結進來，而是在需要的時候才透過動態連結器 (Dynamic Linker) 尋找並連結函式庫，這種方式可以不用載入全部的程式，因此可以節省記憶體。當很多執行中的程式共用到函式庫時，動態連結所節省的記憶體數量就相當可觀。

15. macro 跟 inline : 
inline 和 marco 一樣都會被複製到呼叫處，但 marco 因為是直接用取代貼上，所以有些地方需注意，
marco 不執行參數型別檢查、也沒有語法檢查，也可能產生邏輯錯誤，例如以下指令都編得過，但會出問題

16.
  (1) debug會變得複雜。
        編譯器不能對macro本身做語法檢查，只能檢查預處理(preprocess)後的結果。
  (2) 無法遞迴呼叫。
        根據C standard 6.10.3.4，
        如果某macro的定義裡裏面含有跟此macro名稱同樣的的字串，
        該字串將不會被預處理。

        所以：

        #define pr(n) ((n==1)? 1 : pr(n-1))
        cout<< pr(5) <<endl;

        預處理過後會變成：

        cout<< ((5==1)? 1 : pr(5 -1)) <<endl;  // pr沒有定義，編譯會出錯

  (3) 無法用 & 加在 macro name 之前，取得函式位址。
       因為他不是函式，所以你也不可以把函式指標套用在macro上。
       
  (4) 可能會導致奇怪的side effect或其他無法預測的問題。

        錯誤例子：

        #include <stdio.h>
        #define SQUARE(x)    (x * x)
        int main()
        {
            printf("%d\n", SQUARE(10-5)); // 預處理後變成SQUARE(10-5*10-5)
            return 0;
        }



白板題
1. 寫一個swap？傳變數進swap時是call by value還是call by reference？

2. #define SUM(A, B) A+B
   SUM(1,2)*3 = ?
   Why? And How to correct the macro?

Sol : 
#define SUM(A,B) (A+B)
因為macro只是單純的字詞替換，
所以沒有括號就變成   1+2*3 = 7



3. 真值表(AND, OR, XOR)

4. deadlock

5. ++a, a++

6. 寫linked list
